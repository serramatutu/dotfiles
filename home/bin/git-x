#/bin/bash

case "$1" in 
    "log") 
        git log --all --graph --pretty=format:'%C(magenta)%h %C(yellow) %an %C(magenta) (%as, %ar) %C(auto) %D%n%s%n' 
        ;;

    "branch") 
        branch=$(git branch | cut -c 3- | fzf)
        git switch "$branch"
        ;;

    "browse")
        origin=$(git config --get remote.origin.url)
        if ! echo "$origin" | grep -q "github\.com"; then
            echo "Repository origin '$origin' is not GitHub."
            exit 1
        fi
        repo_url=$(
            echo "$origin" \
            | sd "git@github.com:" "https://github.com/" \
            | sd '\.git$' ""
        )
        echo "$repo_url"
        open "$repo_url"
        ;;

    "prune")
        main="main"
        if git rev-parse master > /dev/null 2>&1 ; then
            main="master"
        fi

        current_branch=$(git rev-parse --abbrev-ref HEAD)
        if [ "$current_branch" != "$main" ]; then
            echo "Must be on $main to prune branches."
            return 1
        fi

        # delete normally merged branches
        git branch --merged | egrep -v '(^\*|master|main)' | xargs git branch -d

        # delete squash-merged branches
        git checkout -q "$main"
        git for-each-ref refs/heads/ "--format=%(refname:short)" | while read branch; do 
            merge_base=$(git merge-base $main $branch) 
            cherry=$(git cherry $main $(git commit-tree $(git rev-parse "$branch^{tree}") -p $merge_base -m _))
            should_delete=$(echo "$cherry" | grep "-")

            if [ "$should_delete" != "" ]; then
                git branch -D $branch; 
            else
                echo "Keeping branch $branch"
            fi
        done
        ;;

    "help")
        man git-x
        ;;

    *)
        echo "'$1' is not a valid x command.\nRun 'git x help' to learn more."
        exit 1
        ;;
esac

